-- Query 1: Optimized reservation software query
SELECT 
  SOFTWARE.*,
  MAP_SOFTWARE.DEVICE_MODEL_NAME,
  MAP_SOFTWARE.DEVICE_TYPE,
  SUM(CASE WHEN MAPPER.DOWNLOAD_STATUS IS NULL THEN 1 ELSE 0 END) AS cnt_wait_state,
  SUM(CASE WHEN MAPPER.DOWNLOAD_STATUS = 'upgrade_success' THEN 1 ELSE 0 END) AS cnt_finish_state,
  SUM(CASE WHEN MAPPER.DOWNLOAD_STATUS = 'download_finished' THEN 1 ELSE 0 END) AS cnt_download_finished_state,
  SUM(CASE WHEN MAPPER.DOWNLOAD_STATUS = 'downloading' THEN 1 ELSE 0 END) AS cnt_downloading_state,
  SUM(CASE WHEN MAPPER.DOWNLOAD_STATUS = 'upgrade_fail' THEN 1 ELSE 0 END) AS cnt_upgrade_fail_state,
  COUNT(MAPPER.DEVICE_ID) AS cnt_all_state
FROM 
  MI_DMS_INFO_RESERVATION_SOFTWARE SOFTWARE 
JOIN  
  MI_DMS_MAP_DEVICE_MODEL_SOFTWARE MAP_SOFTWARE 
    ON SOFTWARE.SOFTWARE_ID = MAP_SOFTWARE.SOFTWARE_ID 
LEFT JOIN 
  MI_DMS_MAP_RESERVATION_SOFTWARE_DEVICE MAPPER 
    ON SOFTWARE.SOFTWARE_RSV_ID = MAPPER.SOFTWARE_RSV_ID
WHERE  
  (SOFTWARE_TYPE = '' OR SOFTWARE_TYPE = '05')
GROUP BY 
  SOFTWARE.SOFTWARE_RSV_ID,
  SOFTWARE.SOFTWARE_ID,
  MAP_SOFTWARE.DEVICE_MODEL_NAME,
  MAP_SOFTWARE.DEVICE_TYPE
ORDER BY 
  SOFTWARE.CREATE_DATE DESC;

-- Query 2: Optimized device information query
SELECT 
  A.DEVICE_ID, A.DEVICE_NAME, B.GROUP_NAME, B.GROUP_ID, A.DEVICE_MODEL_CODE, A.DEVICE_MODEL_NAME, 
  A.ERROR_FLAG, A.PLAYER_VERSION, A.SERIAL_DECIMAL, A.SCREEN_SIZE, A.RESOLUTION, 
  A.FIRMWARE_VERSION, A.OS_IMAGE_VERSION, A.DISK_SPACE_REPOSITORY, A.DISK_SPACE_USAGE,
  A.EWF_STATE, A.APPLICATION_VERSION, A.FIRMWARE_INDICATORS, A.RULE_VERSION, 
  A.IP_ADDRESS, A.MAC_ADDRESS, A.DEVICE_TYPE, A.DEVICE_TYPE_VERSION,
  A.LOCATION, A.TUNNELING_SERVER, A.CREATE_DATE, A.CREATOR_ID, A.IS_APPROVED, 
  A.WEBCAM, A.VWT_ID, A.HAS_CHILD, A.CHILD_CNT, A.IS_CHILD, A.CONN_CHILD_CNT, 
  A.MAP_LOCATION, A.LAST_CONNECTION_TIME, A.SCREEN_ROTATION, A.PRE_CONFIG_VERSION,
  COUNT(DISTINCT ICON_ERROR_HW.DEVICE_ID) AS ICON_ERROR_HW,
  COUNT(DISTINCT CASE WHEN (ICON_PROCESS_CONTENT_DOWNLOAD.PROGRESS IS NULL OR ICON_PROCESS_CONTENT_DOWNLOAD.PROGRESS != '100 %') 
                     THEN ICON_PROCESS_CONTENT_DOWNLOAD.DEVICE_ID END) AS ICON_PROCESS_CONTENT_DOWNLOAD,
  COUNT(DISTINCT CASE WHEN ICON_PROCESS_LOG.STATUS != 'END' 
                     THEN ICON_PROCESS_LOG.DEVICE_ID END) AS ICON_PROCESS_LOG,
  COUNT(DISTINCT CASE WHEN (ICON_PROCESS_SW_DOWNLOAD.DOWNLOAD_STATUS = 'downloading' AND 
                           ICON_PROCESS_SW_DOWNLOAD.REGIST_TIME > NOW() - INTERVAL '12 HOUR')
                     THEN ICON_PROCESS_SW_DOWNLOAD.DEVICE_ID END) AS ICON_PROCESS_SW_DOWNLOAD,
  COUNT(DISTINCT ICON_MEMO.DEVICE_ID) AS ICON_MEMO,
  COUNT(DISTINCT ICON_BACKUP.BACKUP_DEVICE_ID) AS ICON_BACKUP
FROM 
  MI_DMS_INFO_DEVICE A
JOIN 
  MI_DMS_MAP_GROUP_DEVICE C ON A.DEVICE_ID = C.DEVICE_ID
JOIN 
  MI_DMS_INFO_GROUP B ON C.GROUP_ID = B.GROUP_ID
LEFT JOIN 
  MI_TAG_MAP_DEVICE_TAG F ON A.DEVICE_ID = F.DEVICE_ID
LEFT JOIN 
  MI_TAG_INFO_TAG E ON E.TAG_ID = F.TAG_ID
LEFT JOIN 
  MI_FAULT_INFO_ERROR_WARNING ICON_ERROR_HW ON A.DEVICE_ID = ICON_ERROR_HW.DEVICE_ID 
                                           AND ICON_ERROR_HW.LEVEL = 'E' 
                                           AND ICON_ERROR_HW.RECOVERED = FALSE
LEFT JOIN 
  MI_CDS_DOWNLOAD_STATUS_DETAIL ICON_PROCESS_CONTENT_DOWNLOAD ON A.DEVICE_ID = ICON_PROCESS_CONTENT_DOWNLOAD.DEVICE_ID
LEFT JOIN 
  MI_DMS_INFO_LOG_PROCESS ICON_PROCESS_LOG ON A.DEVICE_ID = ICON_PROCESS_LOG.DEVICE_ID
LEFT JOIN (
  SELECT SW_DEV_MAP.* 
  FROM MI_DMS_INFO_RESERVATION_SOFTWARE SW_RSV
  JOIN MI_DMS_MAP_RESERVATION_SOFTWARE_DEVICE SW_DEV_MAP ON SW_RSV.SOFTWARE_RSV_ID = SW_DEV_MAP.SOFTWARE_RSV_ID
  WHERE SW_RSV.SOFTWARE_TYPE NOT IN ('03', '04')
) ICON_PROCESS_SW_DOWNLOAD ON A.DEVICE_ID = ICON_PROCESS_SW_DOWNLOAD.DEVICE_ID
LEFT JOIN 
  MI_DMS_INFO_MEMO ICON_MEMO ON A.DEVICE_ID = ICON_MEMO.DEVICE_ID
LEFT JOIN 
  MI_DMS_INFO_BACKUP ICON_BACKUP ON A.DEVICE_ID = ICON_BACKUP.BACKUP_DEVICE_ID
WHERE 
  A.IS_APPROVED = TRUE
  AND A.IS_CHILD = FALSE
GROUP BY 
  A.DEVICE_ID, A.DEVICE_NAME, B.GROUP_NAME, B.GROUP_ID, A.DEVICE_MODEL_CODE, A.DEVICE_MODEL_NAME, 
  A.ERROR_FLAG, A.PLAYER_VERSION, A.SERIAL_DECIMAL, A.SCREEN_SIZE, A.RESOLUTION, 
  A.FIRMWARE_VERSION, A.OS_IMAGE_VERSION, A.DISK_SPACE_REPOSITORY, A.DISK_SPACE_USAGE,
  A.EWF_STATE, A.APPLICATION_VERSION, A.FIRMWARE_INDICATORS, A.RULE_VERSION, 
  A.IP_ADDRESS, A.MAC_ADDRESS, A.DEVICE_TYPE, A.DEVICE_TYPE_VERSION,
  A.LOCATION, A.TUNNELING_SERVER, A.CREATE_DATE, A.CREATOR_ID, A.IS_APPROVED, 
  A.WEBCAM, A.VWT_ID, A.HAS_CHILD, A.CHILD_CNT, A.IS_CHILD, A.CONN_CHILD_CNT, 
  A.MAP_LOCATION, A.LAST_CONNECTION_TIME, A.SCREEN_ROTATION, A.PRE_CONFIG_VERSION
ORDER BY 
  A.DEVICE_NAME ASC;

-- Query 3: Optimized content information query
SELECT DISTINCT
  A.CONTENT_ID, A.CONTENT_NAME, A.CONTENT_META_DATA, A.LAST_MODIFIED_DATE,
  A.IS_DELETED, A.SHARE_FLAG, A.ORGANIZATION_ID, A.POLLING_INTERVAL, 
  A.APPROVAL_STATUS, A.APPROVAL_OPINION, A.IS_IN_SHARE_FOLDER, A.EXPIRATION_DATE,
  B.VERSION_ID, B.CREATOR_ID, B.CREATE_DATE, B.MEDIA_TYPE, B.TOTAL_SIZE,
  B.PLAY_TIME, B.RESOLUTION, B.IS_ACTIVE, B.MAIN_FILE_ID, B.THUMB_FILE_ID,
  B.SFI_FILE_ID, B.IS_LINEAR_VWL, B.MODEL_COUNT_INFO, B.SCREEN_COUNT,
  B.X_COUNT, B.Y_COUNT, B.X_RANGE, B.Y_RANGE, B.IS_STREAMING, B.IS_TEMPLATE, 
  B.IS_PARSED, B.IS_USED_TEMPLATE, B.DEVICE_TYPE, B.DEVICE_TYPE_VERSION,
  B.TEMPLATE_PAGE_COUNT, B.MAIN_FILE_EXTENSION, B.VWL_VERSION, B.MULTI_VWL,
  B.PLAY_TIME_MILLI, B.HTML_START_PAGE, B.URL_ADDRESS, B.REFRESH_INTERVAL, B.IS_AISR,
  C.GROUP_NAME, D.GROUP_ID, E.FILE_NAME AS THUMB_FILE_NAME,
  EE.FILE_NAME AS MAIN_FILE_NAME
FROM 
  MI_CMS_INFO_CONTENT A
JOIN 
  MI_CMS_INFO_CONTENT_VERSION B ON A.CONTENT_ID = B.CONTENT_ID
JOIN 
  MI_CMS_MAP_GROUP_CONTENT D ON D.CONTENT_ID = A.CONTENT_ID
JOIN 
  MI_CMS_INFO_CONTENT_GROUP C ON C.GROUP_ID = D.GROUP_ID
JOIN 
  MI_USER_INFO_USER F ON F.USER_ID = A.CREATOR_ID
LEFT JOIN 
  MI_CMS_MAP_SHARE_FOLDER_CONTENT Y ON A.CONTENT_ID = Y.CONTENT_ID
LEFT JOIN 
  MI_CMS_INFO_FILE E ON E.FILE_ID = B.THUMB_FILE_ID
LEFT JOIN 
  MI_CMS_INFO_FILE EE ON EE.FILE_ID = B.MAIN_FILE_ID
LEFT JOIN 
  MI_CMS_MAP_FILE G ON B.CONTENT_ID = G.CONTENT_ID
WHERE 
  B.IS_ACTIVE = 'Y' AND
  A.IS_DELETED = 'N' AND
  (F.ROOT_GROUP_ID = A.ORGANIZATION_ID OR EXISTS (
    SELECT 1 
    FROM MI_USER_MAP_USER_MANAGE_ORG M
    JOIN MI_USER_MAP_MANAGE_ORG_GROUP_MANAGE_ORG N ON M.MNG_ORG_GROUP_ID = N.MNG_ORG_GROUP_ID
    WHERE M.USER_ID = F.USER_ID AND N.ORG_GROUP_ID = A.ORGANIZATION_ID
  ))
LIMIT 20 OFFSET 0;